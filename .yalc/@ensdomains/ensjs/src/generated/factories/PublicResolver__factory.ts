/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  PublicResolver,
  PublicResolverInterface,
} from "../PublicResolver";

const _abi = [
  {
    type: "constructor",
    payable: false,
    inputs: [
      {
        type: "address",
        name: "_ens",
      },
      {
        type: "address",
        name: "wrapperAddress",
      },
      {
        type: "address",
        name: "_trustedETHController",
      },
      {
        type: "address",
        name: "_trustedReverseRegistrar",
      },
    ],
  },
  {
    type: "event",
    anonymous: false,
    name: "ABIChanged",
    inputs: [
      {
        type: "bytes32",
        name: "node",
        indexed: true,
      },
      {
        type: "uint256",
        name: "contentType",
        indexed: true,
      },
    ],
  },
  {
    type: "event",
    anonymous: false,
    name: "AddrChanged",
    inputs: [
      {
        type: "bytes32",
        name: "node",
        indexed: true,
      },
      {
        type: "address",
        name: "a",
        indexed: false,
      },
    ],
  },
  {
    type: "event",
    anonymous: false,
    name: "AddressChanged",
    inputs: [
      {
        type: "bytes32",
        name: "node",
        indexed: true,
      },
      {
        type: "uint256",
        name: "coinType",
        indexed: false,
      },
      {
        type: "bytes",
        name: "newAddress",
        indexed: false,
      },
    ],
  },
  {
    type: "event",
    anonymous: false,
    name: "ApprovalForAll",
    inputs: [
      {
        type: "address",
        name: "owner",
        indexed: true,
      },
      {
        type: "address",
        name: "operator",
        indexed: true,
      },
      {
        type: "bool",
        name: "approved",
        indexed: false,
      },
    ],
  },
  {
    type: "event",
    anonymous: false,
    name: "ContenthashChanged",
    inputs: [
      {
        type: "bytes32",
        name: "node",
        indexed: true,
      },
      {
        type: "bytes",
        name: "hash",
        indexed: false,
      },
    ],
  },
  {
    type: "event",
    anonymous: false,
    name: "DNSRecordChanged",
    inputs: [
      {
        type: "bytes32",
        name: "node",
        indexed: true,
      },
      {
        type: "bytes",
        name: "name",
        indexed: false,
      },
      {
        type: "uint16",
        name: "resource",
        indexed: false,
      },
      {
        type: "bytes",
        name: "record",
        indexed: false,
      },
    ],
  },
  {
    type: "event",
    anonymous: false,
    name: "DNSRecordDeleted",
    inputs: [
      {
        type: "bytes32",
        name: "node",
        indexed: true,
      },
      {
        type: "bytes",
        name: "name",
        indexed: false,
      },
      {
        type: "uint16",
        name: "resource",
        indexed: false,
      },
    ],
  },
  {
    type: "event",
    anonymous: false,
    name: "DNSZoneCleared",
    inputs: [
      {
        type: "bytes32",
        name: "node",
        indexed: true,
      },
    ],
  },
  {
    type: "event",
    anonymous: false,
    name: "DNSZonehashChanged",
    inputs: [
      {
        type: "bytes32",
        name: "node",
        indexed: true,
      },
      {
        type: "bytes",
        name: "lastzonehash",
        indexed: false,
      },
      {
        type: "bytes",
        name: "zonehash",
        indexed: false,
      },
    ],
  },
  {
    type: "event",
    anonymous: false,
    name: "InterfaceChanged",
    inputs: [
      {
        type: "bytes32",
        name: "node",
        indexed: true,
      },
      {
        type: "bytes4",
        name: "interfaceID",
        indexed: true,
      },
      {
        type: "address",
        name: "implementer",
        indexed: false,
      },
    ],
  },
  {
    type: "event",
    anonymous: false,
    name: "NameChanged",
    inputs: [
      {
        type: "bytes32",
        name: "node",
        indexed: true,
      },
      {
        type: "string",
        name: "name",
        indexed: false,
      },
    ],
  },
  {
    type: "event",
    anonymous: false,
    name: "PubkeyChanged",
    inputs: [
      {
        type: "bytes32",
        name: "node",
        indexed: true,
      },
      {
        type: "bytes32",
        name: "x",
        indexed: false,
      },
      {
        type: "bytes32",
        name: "y",
        indexed: false,
      },
    ],
  },
  {
    type: "event",
    anonymous: false,
    name: "TextChanged",
    inputs: [
      {
        type: "bytes32",
        name: "node",
        indexed: true,
      },
      {
        type: "string",
        name: "indexedKey",
        indexed: true,
      },
      {
        type: "string",
        name: "key",
        indexed: false,
      },
    ],
  },
  {
    type: "function",
    name: "ABI",
    constant: true,
    stateMutability: "view",
    payable: false,
    inputs: [
      {
        type: "bytes32",
        name: "node",
      },
      {
        type: "uint256",
        name: "contentTypes",
      },
    ],
    outputs: [
      {
        type: "uint256",
      },
      {
        type: "bytes",
      },
    ],
  },
  {
    type: "function",
    name: "addr",
    constant: true,
    stateMutability: "view",
    payable: false,
    inputs: [
      {
        type: "bytes32",
        name: "node",
      },
    ],
    outputs: [
      {
        type: "address",
      },
    ],
  },
  {
    type: "function",
    name: "addr",
    constant: true,
    stateMutability: "view",
    payable: false,
    inputs: [
      {
        type: "bytes32",
        name: "node",
      },
      {
        type: "uint256",
        name: "coinType",
      },
    ],
    outputs: [
      {
        type: "bytes",
      },
    ],
  },
  {
    type: "function",
    name: "clearDNSZone",
    constant: false,
    payable: false,
    inputs: [
      {
        type: "bytes32",
        name: "node",
      },
    ],
    outputs: [],
  },
  {
    type: "function",
    name: "contenthash",
    constant: true,
    stateMutability: "view",
    payable: false,
    inputs: [
      {
        type: "bytes32",
        name: "node",
      },
    ],
    outputs: [
      {
        type: "bytes",
      },
    ],
  },
  {
    type: "function",
    name: "dnsRecord",
    constant: true,
    stateMutability: "view",
    payable: false,
    inputs: [
      {
        type: "bytes32",
        name: "node",
      },
      {
        type: "bytes32",
        name: "name",
      },
      {
        type: "uint16",
        name: "resource",
      },
    ],
    outputs: [
      {
        type: "bytes",
      },
    ],
  },
  {
    type: "function",
    name: "hasDNSRecords",
    constant: true,
    stateMutability: "view",
    payable: false,
    inputs: [
      {
        type: "bytes32",
        name: "node",
      },
      {
        type: "bytes32",
        name: "name",
      },
    ],
    outputs: [
      {
        type: "bool",
      },
    ],
  },
  {
    type: "function",
    name: "interfaceImplementer",
    constant: true,
    stateMutability: "view",
    payable: false,
    inputs: [
      {
        type: "bytes32",
        name: "node",
      },
      {
        type: "bytes4",
        name: "interfaceID",
      },
    ],
    outputs: [
      {
        type: "address",
      },
    ],
  },
  {
    type: "function",
    name: "isApprovedForAll",
    constant: true,
    stateMutability: "view",
    payable: false,
    inputs: [
      {
        type: "address",
        name: "account",
      },
      {
        type: "address",
        name: "operator",
      },
    ],
    outputs: [
      {
        type: "bool",
      },
    ],
  },
  {
    type: "function",
    name: "multicall",
    constant: false,
    payable: false,
    inputs: [
      {
        type: "bytes[]",
        name: "data",
      },
    ],
    outputs: [
      {
        type: "bytes[]",
        name: "results",
      },
    ],
  },
  {
    type: "function",
    name: "name",
    constant: true,
    stateMutability: "view",
    payable: false,
    inputs: [
      {
        type: "bytes32",
        name: "node",
      },
    ],
    outputs: [
      {
        type: "string",
      },
    ],
  },
  {
    type: "function",
    name: "pubkey",
    constant: true,
    stateMutability: "view",
    payable: false,
    inputs: [
      {
        type: "bytes32",
        name: "node",
      },
    ],
    outputs: [
      {
        type: "bytes32",
        name: "x",
      },
      {
        type: "bytes32",
        name: "y",
      },
    ],
  },
  {
    type: "function",
    name: "setABI",
    constant: false,
    payable: false,
    inputs: [
      {
        type: "bytes32",
        name: "node",
      },
      {
        type: "uint256",
        name: "contentType",
      },
      {
        type: "bytes",
        name: "data",
      },
    ],
    outputs: [],
  },
  {
    type: "function",
    name: "setAddr",
    constant: false,
    payable: false,
    inputs: [
      {
        type: "bytes32",
        name: "node",
      },
      {
        type: "uint256",
        name: "coinType",
      },
      {
        type: "bytes",
        name: "a",
      },
    ],
    outputs: [],
  },
  {
    type: "function",
    name: "setAddr",
    constant: false,
    payable: false,
    inputs: [
      {
        type: "bytes32",
        name: "node",
      },
      {
        type: "address",
        name: "a",
      },
    ],
    outputs: [],
  },
  {
    type: "function",
    name: "setApprovalForAll",
    constant: false,
    payable: false,
    inputs: [
      {
        type: "address",
        name: "operator",
      },
      {
        type: "bool",
        name: "approved",
      },
    ],
    outputs: [],
  },
  {
    type: "function",
    name: "setContenthash",
    constant: false,
    payable: false,
    inputs: [
      {
        type: "bytes32",
        name: "node",
      },
      {
        type: "bytes",
        name: "hash",
      },
    ],
    outputs: [],
  },
  {
    type: "function",
    name: "setDNSRecords",
    constant: false,
    payable: false,
    inputs: [
      {
        type: "bytes32",
        name: "node",
      },
      {
        type: "bytes",
        name: "data",
      },
    ],
    outputs: [],
  },
  {
    type: "function",
    name: "setInterface",
    constant: false,
    payable: false,
    inputs: [
      {
        type: "bytes32",
        name: "node",
      },
      {
        type: "bytes4",
        name: "interfaceID",
      },
      {
        type: "address",
        name: "implementer",
      },
    ],
    outputs: [],
  },
  {
    type: "function",
    name: "setName",
    constant: false,
    payable: false,
    inputs: [
      {
        type: "bytes32",
        name: "node",
      },
      {
        type: "string",
        name: "newName",
      },
    ],
    outputs: [],
  },
  {
    type: "function",
    name: "setPubkey",
    constant: false,
    payable: false,
    inputs: [
      {
        type: "bytes32",
        name: "node",
      },
      {
        type: "bytes32",
        name: "x",
      },
      {
        type: "bytes32",
        name: "y",
      },
    ],
    outputs: [],
  },
  {
    type: "function",
    name: "setText",
    constant: false,
    payable: false,
    inputs: [
      {
        type: "bytes32",
        name: "node",
      },
      {
        type: "string",
        name: "key",
      },
      {
        type: "string",
        name: "value",
      },
    ],
    outputs: [],
  },
  {
    type: "function",
    name: "setZonehash",
    constant: false,
    payable: false,
    inputs: [
      {
        type: "bytes32",
        name: "node",
      },
      {
        type: "bytes",
        name: "hash",
      },
    ],
    outputs: [],
  },
  {
    type: "function",
    name: "supportsInterface",
    constant: true,
    stateMutability: "pure",
    payable: false,
    inputs: [
      {
        type: "bytes4",
        name: "interfaceID",
      },
    ],
    outputs: [
      {
        type: "bool",
      },
    ],
  },
  {
    type: "function",
    name: "text",
    constant: true,
    stateMutability: "view",
    payable: false,
    inputs: [
      {
        type: "bytes32",
        name: "node",
      },
      {
        type: "string",
        name: "key",
      },
    ],
    outputs: [
      {
        type: "string",
      },
    ],
  },
  {
    type: "function",
    name: "zonehash",
    constant: true,
    stateMutability: "view",
    payable: false,
    inputs: [
      {
        type: "bytes32",
        name: "node",
      },
    ],
    outputs: [
      {
        type: "bytes",
      },
    ],
  },
];

export class PublicResolver__factory {
  static readonly abi = _abi;
  static createInterface(): PublicResolverInterface {
    return new utils.Interface(_abi) as PublicResolverInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PublicResolver {
    return new Contract(address, _abi, signerOrProvider) as PublicResolver;
  }
}
